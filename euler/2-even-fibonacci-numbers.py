'''
Problem statement:
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

Reference: https://projecteuler.net/problem=2

Notes:
Time complexity: O(n)
Space complexity: O(1)

How to run? :
python3 2-even-fibonacci-numbers.py 4000000
'''
import sys
import time
start_time = time.time()

n = int(sys.argv[1])

x=1
y=1
z=2
sum = 0
while z < n:
    if z&1 == 0:
        sum += z
    x=y
    y=z
    z=x+y

print(sum)
print("Execution time in seconds:",time.time() - start_time)